// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // human readable instruction bits

    And(a=instruction[15], b=true, out=CInstructionBit);
    Not(in=CInstructionBit, out=AInstructionBit);

    And(a=instruction[12], b=true, out=AorMbit);

    And(a=instruction[11], b=true, out=C1);
    And(a=instruction[10], b=true, out=C2);
    And(a=instruction[9], b=true, out=C3);
    And(a=instruction[8], b=true, out=C4);
    And(a=instruction[7], b=true, out=C5);
    And(a=instruction[6], b=true, out=C6);

    And(a=instruction[5], b=true, out=D1);
    And(a=instruction[4], b=true, out=D2);
    And(a=instruction[3], b=true, out=D3);

    And(a=instruction[2], b=true, out=J1);
    And(a=instruction[1], b=true, out=J2);
    And(a=instruction[0], b=true, out=J3);

    Not(in=J1, out=notJ1);
    Not(in=J2, out=notJ2);
    Not(in=J3, out=notJ3);


    // Instruction handling

    Mux16(a=ALUOut, b=instruction, sel=AInstructionBit, out=ALUOrAIstruction);

    Or(a=D1, b=AInstructionBit, out=loadARegister);
    ARegister(in=ALUOrAIstruction, load=loadARegister, out=ARegisterOut, out[0..14]=addressM);

    // ALU inputs

    Mux16(a=ARegisterOut, b=inM, sel=AorMbit, out=AOrMInput);
    ALU(
        x=DRegisterOut, 
        y=AOrMInput, 
        zx=C1,
        nx=C2,
        zy=C3,
        ny=C4,
        f=C5,
        no=C6,
        out=ALUOut,
        out=outM,
        zr=zr,
        ng=ng
    );
    DRegister(in=ALUOut, load=D2, out=DRegisterOut);

    And(a=CInstructionBit, b=D3, out=writeM);

    // Control

    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);

    And3Way(in[0]=notJ1, in[1]=notJ2, in[2]=J3, out=JGTbits);
    And3Way(in[0]=notJ1, in[1]=J2, in[2]=notJ3, out=JEQbits);
    And3Way(in[0]=notJ1, in[1]=J2, in[2]=J3, out=JGEbits);
    And3Way(in[0]=J1, in[1]=notJ2, in[2]=notJ3, out=JLTbits);
    And3Way(in[0]=J1, in[1]=notJ2, in[2]=J3, out=JNEbits);
    And3Way(in[0]=J1, in[1]=J2, in[2]=notJ3, out=JLEbits);
    And3Way(in[0]=J1, in[1]=J2, in[2]=J3, out=JMPbits);

    And(a=notNg, b=notZr, out=JGTcondition);
    And(a=JGTbits, b=JGTcondition, out=JGT);

    And(a=JEQbits, b=zr, out=JEQ);

    And(a=JGEbits, b=notNg, out=JGE);

    And(a=JLTbits, b=ng, out=JLT);

    And(a=JNEbits, b=notZr, out=JNE);

    Or(a=ng, b=zr, out=JLEcondition);
    And(a=JLEbits, b=JLEcondition, out=JLE);

    Or8Way(in[0]=false, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=JMPbits, out=doJump);
    And(a=CInstructionBit, b=doJump, out=doJumpIfCInstruction);


    PC(in=ARegisterOut, load=doJumpIfCInstruction, inc=true, reset=reset, out[0..14]=pc);
}