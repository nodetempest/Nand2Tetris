// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLength = Math.max(1, maxLength);
        let str = Array.new(maxLength);
        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let length = 0;
        do Memory.deAlloc(str);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = Math.max(0, length - 1);
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int accUntil, i, pow, value;

        // 45 is "-"
        if (charAt(0) = 45) {
            let accUntil = 0;
        } else {
            let accUntil = -1;
        }

        let pow = 1;
        let i = length - 1;
        let value = 0;

        while (i > accUntil) {
            let value = value + ((charAt(i)  - 48) * pow);
            let i = i - 1;
            let pow = pow * 10;
        }

        if (charAt(0) = 45) {
            let value = -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int value) {
        var int ch, powOfTen, i;

        let length = 1;
        let powOfTen = 1;
        let i = 0;

        if (value < 0) {
            do setCharAt(0, 45);
            let value = Math.abs(value);
            let i = 1;
        }

        while (value / powOfTen > 10) {
            let powOfTen = powOfTen * 10;
            let length = length + 1;
        }

        while (i < length) {
            let ch = value / powOfTen;

            do setCharAt(i, 48 + ch);

            let value = value - (ch * powOfTen);

            let powOfTen = powOfTen / 10;
            let i = i + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
